//Automatically generated by rifgen
use crate::*;

use jni_sys::*;
foreign_class!(
    class JwstStorage {
        self_type JwstStorage;
        constructor JwstStorage::new(path: String) -> JwstStorage;
        fn JwstStorage::error(&self) -> Option<String>; alias error;
        fn JwstStorage::connect(&mut self, workspace_id: String, remote: String) -> Option<Workspace>; alias connect;
    }
);
foreign_class!(
    class WorkspaceTransaction {
        self_type WorkspaceTransaction;
        private constructor new<'a>() -> WorkspaceTransaction<'a> {
            unimplemented!()
        }
        fn WorkspaceTransaction::remove(& mut self , block_id : String)->bool; alias remove;
        fn WorkspaceTransaction::create<B>(& mut self , block_id : String , flavor : String)->Block; alias create;
        fn WorkspaceTransaction::commit(& mut self); alias commit;
    }
);
foreign_callback!(
    callback OnWorkspaceTransaction {
        self_type OnWorkspaceTransaction;
        onTrx = OnWorkspaceTransaction::on_trx(& self , trx : WorkspaceTransaction);
    }
);

foreign_class!(
	class Block {
		self_type Block;
		constructor Block::new(trx : & mut WorkspaceTransaction , workspace : & Workspace , block_id : String , flavor : String , operator : u64 ,)->Block;
		fn Block::set_bool(& self , trx : & mut WorkspaceTransaction , key : String , value : bool); alias setBool;
		fn Block::set_string(& self , trx : & mut WorkspaceTransaction , key : String , value : String); alias setString;
		fn Block::set_float(& self , trx : & mut WorkspaceTransaction , key : String , value : f64); alias setFloat;
		fn Block::set_integer(& self , trx : & mut WorkspaceTransaction , key : String , value : i64); alias setInteger;
		fn Block::set_null(& self , trx : & mut WorkspaceTransaction , key : String); alias setNull;
		fn Block::is_bool(& self , trx : & WorkspaceTransaction , key : String)->bool; alias isBool;
		fn Block::is_string(& self , trx : & WorkspaceTransaction , key : String)->bool; alias isString;
		fn Block::is_float(& self , trx : & WorkspaceTransaction , key : String)->bool; alias isFloat;
		fn Block::is_integer(& self , trx : & WorkspaceTransaction , key : String)->bool; alias isInteger;
		fn Block::get_bool(& self , trx : & WorkspaceTransaction , key : String)->Option<i64>; alias getBool;
		fn Block::get_string(& self , trx : & WorkspaceTransaction , key : String)->Option<String>; alias getString;
		fn Block::get_float(& self , trx : & WorkspaceTransaction , key : String)->Option<f64>; alias getFloat;
		fn Block::get_integer(& self , trx : & WorkspaceTransaction , key : String)->Option<i64>; alias getInteger;
		fn Block::id(& self)->String; alias id;
		fn Block::flavor(& self , trx : & WorkspaceTransaction)->String; alias flavor;
		fn Block::version(& self , trx : & WorkspaceTransaction)->String; alias version;
		fn Block::created(& self , trx : & WorkspaceTransaction)->u64; alias created;
		fn Block::updated(& self , trx : & WorkspaceTransaction)->u64; alias updated;
		fn Block::parent(& self , trx : & WorkspaceTransaction)->Option<String>; alias parent;
		fn Block::children(& self , trx : & WorkspaceTransaction)->Vec<String>; alias children;
		fn Block::push_children(& self , trx : & mut WorkspaceTransaction , block : & Block); alias pushChildren;
		fn Block::insert_children_at(& self , trx : & mut WorkspaceTransaction , block : & Block , pos : u32); alias insertChildrenAt;
		fn Block::insert_children_before(& self , trx : & mut WorkspaceTransaction , block : & Block , reference : & str ,); alias insertChildrenBefore;
		fn Block::insert_children_after(& self , trx : & mut WorkspaceTransaction , block : & Block , reference : & str ,); alias insertChildrenAfter;
		fn Block::remove_children(& self , trx : & mut WorkspaceTransaction , block : & Block); alias removeChildren;
		fn Block::exists_children(& self , trx : & WorkspaceTransaction , block_id : & str)->i32; alias existsChildren;
	}
);
foreign_class!(
	class Workspace {
		self_type Workspace;
		constructor Workspace::new(_id : String)->Workspace;
		fn Workspace::id(& self)->String; alias id;
		fn Workspace::client_id(& self)->u64; alias clientId;
		fn Workspace::get(& self , trx : & WorkspaceTransaction , block_id : String)->Option<Block>; alias get;
		fn Workspace::exists(& self , trx : & WorkspaceTransaction , block_id : & str)->bool; alias exists;
		fn Workspace::with_trx(& self , on_trx : Box < dyn OnWorkspaceTransaction >)->bool; alias withTrx;
		fn Workspace::drop_trx(& self , trx : WorkspaceTransaction); alias dropTrx;
	}
);
