// Automatically generated by flapigen
package com.toeverything.jwst.lib;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

public final class Block {

    public Block(@NonNull Workspace ws, @NonNull String block_id, @NonNull String flavour, long operator) {
        long a0 = ws.mNativeObj;
        mNativeObj = init(a0, block_id, flavour, operator);
        JNIReachabilityFence.reachabilityFence1(ws);
    }
    private static native long init(long ws, @NonNull String block_id, @NonNull String flavour, long operator);

    public final void setBool(@NonNull String key, boolean value) {
        do_setBool(mNativeObj, key, value);
    }
    private static native void do_setBool(long self, @NonNull String key, boolean value);

    public final void setString(@NonNull String key, @NonNull String value) {
        do_setString(mNativeObj, key, value);
    }
    private static native void do_setString(long self, @NonNull String key, @NonNull String value);

    public final void setFloat(@NonNull String key, double value) {
        do_setFloat(mNativeObj, key, value);
    }
    private static native void do_setFloat(long self, @NonNull String key, double value);

    public final void setInteger(@NonNull String key, long value) {
        do_setInteger(mNativeObj, key, value);
    }
    private static native void do_setInteger(long self, @NonNull String key, long value);

    public final void setNull(@NonNull String key) {
        do_setNull(mNativeObj, key);
    }
    private static native void do_setNull(long self, @NonNull String key);

    public final boolean isBool(@NonNull String key) {
        boolean ret = do_isBool(mNativeObj, key);

        return ret;
    }
    private static native boolean do_isBool(long self, @NonNull String key);

    public final boolean isString(@NonNull String key) {
        boolean ret = do_isString(mNativeObj, key);

        return ret;
    }
    private static native boolean do_isString(long self, @NonNull String key);

    public final boolean isFloat(@NonNull String key) {
        boolean ret = do_isFloat(mNativeObj, key);

        return ret;
    }
    private static native boolean do_isFloat(long self, @NonNull String key);

    public final boolean isInteger(@NonNull String key) {
        boolean ret = do_isInteger(mNativeObj, key);

        return ret;
    }
    private static native boolean do_isInteger(long self, @NonNull String key);

    public final @NonNull java.util.OptionalLong getBool(@NonNull String key) {
        java.util.OptionalLong ret = do_getBool(mNativeObj, key);

        return ret;
    }
    private static native @NonNull java.util.OptionalLong do_getBool(long self, @NonNull String key);

    public final @NonNull java.util.Optional<String> getString(@NonNull String key) {
        String ret = do_getString(mNativeObj, key);
        java.util.Optional<String> convRet = java.util.Optional.ofNullable(ret);

        return convRet;
    }
    private static native @Nullable String do_getString(long self, @NonNull String key);

    public final @NonNull java.util.OptionalDouble getFloat(@NonNull String key) {
        java.util.OptionalDouble ret = do_getFloat(mNativeObj, key);

        return ret;
    }
    private static native @NonNull java.util.OptionalDouble do_getFloat(long self, @NonNull String key);

    public final @NonNull java.util.OptionalLong getInteger(@NonNull String key) {
        java.util.OptionalLong ret = do_getInteger(mNativeObj, key);

        return ret;
    }
    private static native @NonNull java.util.OptionalLong do_getInteger(long self, @NonNull String key);

    public final @NonNull String id() {
        String ret = do_id(mNativeObj);

        return ret;
    }
    private static native @NonNull String do_id(long self);

    public final @NonNull String flavour() {
        String ret = do_flavour(mNativeObj);

        return ret;
    }
    private static native @NonNull String do_flavour(long self);

    public final long created() {
        long ret = do_created(mNativeObj);

        return ret;
    }
    private static native long do_created(long self);

    public final long updated() {
        long ret = do_updated(mNativeObj);

        return ret;
    }
    private static native long do_updated(long self);

    public final @NonNull java.util.Optional<String> parent() {
        String ret = do_parent(mNativeObj);
        java.util.Optional<String> convRet = java.util.Optional.ofNullable(ret);

        return convRet;
    }
    private static native @Nullable String do_parent(long self);

    public final @NonNull java.lang.String [] children() {
        java.lang.String [] ret = do_children(mNativeObj);

        return ret;
    }
    private static native @NonNull java.lang.String [] do_children(long self);

    public final void pushChildren(@NonNull Block block) {
        long a0 = block.mNativeObj;
        do_pushChildren(mNativeObj, a0);

        JNIReachabilityFence.reachabilityFence1(block);
    }
    private static native void do_pushChildren(long self, long block);

    public final void insertChildrenAt(@NonNull Block block, long pos) {
        long a0 = block.mNativeObj;
        do_insertChildrenAt(mNativeObj, a0, pos);

        JNIReachabilityFence.reachabilityFence1(block);
    }
    private static native void do_insertChildrenAt(long self, long block, long pos);

    public final void insertChildrenBefore(@NonNull Block block, @NonNull String reference) {
        long a0 = block.mNativeObj;
        do_insertChildrenBefore(mNativeObj, a0, reference);

        JNIReachabilityFence.reachabilityFence1(block);
    }
    private static native void do_insertChildrenBefore(long self, long block, @NonNull String reference);

    public final void insertChildrenAfter(@NonNull Block block, @NonNull String reference) {
        long a0 = block.mNativeObj;
        do_insertChildrenAfter(mNativeObj, a0, reference);

        JNIReachabilityFence.reachabilityFence1(block);
    }
    private static native void do_insertChildrenAfter(long self, long block, @NonNull String reference);

    public final void removeChildren(@NonNull Block block) {
        long a0 = block.mNativeObj;
        do_removeChildren(mNativeObj, a0);

        JNIReachabilityFence.reachabilityFence1(block);
    }
    private static native void do_removeChildren(long self, long block);

    public final int existsChildren(@NonNull String block_id) {
        int ret = do_existsChildren(mNativeObj, block_id);

        return ret;
    }
    private static native int do_existsChildren(long self, @NonNull String block_id);

    public synchronized void delete() {
        if (mNativeObj != 0) {
            do_delete(mNativeObj);
            mNativeObj = 0;
       }
    }
    @Override
    protected void finalize() throws Throwable {
        try {
            delete();
        }
        finally {
             super.finalize();
        }
    }
    private static native void do_delete(long me);
    /*package*/ Block(InternalPointerMarker marker, long ptr) {
        assert marker == InternalPointerMarker.RAW_PTR;
        this.mNativeObj = ptr;
    }
    /*package*/ long mNativeObj;
}