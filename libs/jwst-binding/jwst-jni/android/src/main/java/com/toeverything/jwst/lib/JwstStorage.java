// Automatically generated by flapigen
package com.toeverything.jwst.lib;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

public final class JwstStorage {

    public JwstStorage(@NonNull String path) {
        mNativeObj = init(path);
    }
    private static native long init(@NonNull String path);

    public JwstStorage(@NonNull String path, @NonNull String level) {
        mNativeObj = init(path, level);
    }
    private static native long init(@NonNull String path, @NonNull String level);

    public final @NonNull java.util.Optional<String> error() {
        String ret = do_error(mNativeObj);
        java.util.Optional<String> convRet = java.util.Optional.ofNullable(ret);

        return convRet;
    }
    private static native @Nullable String do_error(long self);

    public final boolean is_offline() {
        boolean ret = do_is_offline(mNativeObj);

        return ret;
    }
    private static native boolean do_is_offline(long self);

    public final boolean is_initialized() {
        boolean ret = do_is_initialized(mNativeObj);

        return ret;
    }
    private static native boolean do_is_initialized(long self);

    public final boolean is_syncing() {
        boolean ret = do_is_syncing(mNativeObj);

        return ret;
    }
    private static native boolean do_is_syncing(long self);

    public final boolean is_finished() {
        boolean ret = do_is_finished(mNativeObj);

        return ret;
    }
    private static native boolean do_is_finished(long self);

    public final boolean is_error() {
        boolean ret = do_is_error(mNativeObj);

        return ret;
    }
    private static native boolean do_is_error(long self);

    public final @NonNull String get_sync_state() {
        String ret = do_get_sync_state(mNativeObj);

        return ret;
    }
    private static native @NonNull String do_get_sync_state(long self);

    public final @NonNull java.util.Optional<Workspace> connect(@NonNull String workspace_id, @NonNull String remote) {
        long ret = do_connect(mNativeObj, workspace_id, remote);
        java.util.Optional<Workspace> convRet;
        if (ret != 0) {
            convRet = java.util.Optional.of(new Workspace(InternalPointerMarker.RAW_PTR, ret));
        } else {
            convRet = java.util.Optional.empty();
        }

        return convRet;
    }
    private static native long do_connect(long self, @NonNull String workspace_id, @NonNull String remote);

    public synchronized void delete() {
        if (mNativeObj != 0) {
            do_delete(mNativeObj);
            mNativeObj = 0;
       }
    }
    @Override
    protected void finalize() throws Throwable {
        try {
            delete();
        }
        finally {
             super.finalize();
        }
    }
    private static native void do_delete(long me);
    /*package*/ JwstStorage(InternalPointerMarker marker, long ptr) {
        assert marker == InternalPointerMarker.RAW_PTR;
        this.mNativeObj = ptr;
    }
    /*package*/ long mNativeObj;
}