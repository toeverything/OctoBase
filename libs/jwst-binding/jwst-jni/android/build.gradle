plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'maven-publish'
}

android {
    namespace 'com.toeverything.jwst'
    compileSdk 33

    defaultConfig {
        minSdk 28
        targetSdk 33

        aarMetadata {
            minCompileSdk = 28
        }

        testFixtures {
            enable = true
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        ndk.abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/libs']
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    publishing {
        singleVariant('release') {
            withSourcesJar()
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.9.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

def rustBasePath = "../../.."
def archTriplets = [
        'armeabi-v7a': 'armv7-linux-androideabi',
        'arm64-v8a'  : 'aarch64-linux-android',
]

archTriplets.each { arch, target ->
    project.ext.cargo_target_directory = rustBasePath + "/target"
    // Build with cargo
    tasks.create(name: "cargo-build-${arch}", type: Exec, description: "Building core for ${arch}") {
        workingDir rustBasePath + "/.."
        commandLine 'cargo', 'ndk', "-t", arch, 'build', "--package=jwst-jni", '--release'
    }
    // Copy build libs into this app's libs directory
    tasks.create(name: "rust-deploy-${arch}", type: Copy, dependsOn: "cargo-build-${arch}", description: "Copy rust libs for (${arch}) to jniLibs") {
        from "../${project.ext.cargo_target_directory}/${target}/release"// /debug"
        include "*.so"
        into "src/main/libs/${arch}"
    }

    // Hook up tasks to execute before building java
    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn "rust-deploy-${arch}"
    }
    preBuild.dependsOn "rust-deploy-${arch}"

    // Hook up clean tasks
    tasks.create(name: "clean-${arch}", type: Delete, description: "Deleting built libs for ${arch}", dependsOn: "cargo-output-dir-${arch}") {
        delete fileTree("${project.ext.cargo_target_directory}/${target}/release") {// /debug") {
            include '*.so'
        }
    }
    clean.dependsOn "clean-${arch}"
}

publishing {
   repositories {
       maven {
           name = "GitHubPackages"
           url = uri("https://maven.pkg.github.com/toeverything/OctoBase")
           credentials {
               username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
               password = project.findProperty("gpr.token") ?: System.getenv("GITHUB_TOKEN")
           }
       }
   }
    // repositories {
    //     maven {
    //         name = 'jwst'
    //         url = "${project.buildDir}/jwst"
    //     }
    // }
    publications {
        release(MavenPublication) {
            groupId = 'com.toeverything'
            artifactId = 'octobase'
            version = '0.1.22'

            afterEvaluate {
                from components.release
            }
        }
    }
}