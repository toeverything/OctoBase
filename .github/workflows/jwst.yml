name: Build Jwst

on:
    workflow_dispatch:
    push:
        branches: [master]
        paths:
            - 'apps/cloud/**'
            - 'apps/handbook/**'
            - 'apps/keck/**'
            - 'libs/**'
            - '.github/deployment/Dockerfile-cloud'
            - '.github/deployment/Dockerfile-jwst'
            - '.github/workflows/jwst.yml'
    pull_request:
        branches: [master]
        paths:
            - 'apps/cloud/**'
            - 'apps/handbook/**'
            - 'apps/keck/**'
            - 'libs/**'
            - '.github/deployment/Dockerfile-cloud'
            - '.github/deployment/Dockerfile-jwst'
            - '.github/workflows/jwst.yml'

# Cancels all previous workflow runs for pull requests that have not completed.
# See https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency:
    # The concurrency group contains the workflow name and the branch name for
    # pull requests or the commit hash for any other events.
    group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
    cancel-in-progress: true

env:
    REGISTRY: ghcr.io
    NAMESPACE: toeverything
    APIPROXY_IMAGE_NAME: apiproxy
    CLOUD_IMAGE_NAME: cloud
    JWST_IMAGE_NAME: jwst
    IMAGE_TAG: canary-${{ github.sha }}
    IMAGE_TAG_LATEST: nightly-latest

jobs:
    cloud:
        runs-on: self-hosted
        environment: development
        permissions:
            contents: read
            packages: write

        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Install Rust
              uses: actions-rs/toolchain@v1
              with:
                  profile: minimal
                  toolchain: stable
                  override: true

            - name: Set up cargo cache
              uses: actions/cache@v3
              continue-on-error: false
              with:
                  path: |
                      ~/.cargo/bin/
                      ~/.cargo/registry/index/
                      ~/.cargo/registry/cache/
                      ~/.cargo/git/db/
                      ./vendor
                      ./.cargo/config
                      ./node_modules/.pnpm-store
                  key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
                  restore-keys: ${{ runner.os }}-cargo-

            - name: Cargo Vendor
              run: cargo vendor > .cargo/config

            - name: Log in to the Container registry
              uses: docker/login-action@v2
              if: github.ref == 'refs/heads/master'
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.ACTIONS_PACKAGE_PUBLISH }}

            - name: Get current time
              id: time
              run: echo "::set-output name=time::$(date +'%H%M')"

            - name: Extract metadata (tags, labels) for Docker (cloud)
              id: meta_cloud
              uses: docker/metadata-action@v4
              with:
                  images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.CLOUD_IMAGE_NAME }}
                  tags: |
                      ${{ env.IMAGE_TAG }}-${{ steps.time.outputs.time }}
                      ${{ env.IMAGE_TAG_LATEST }}

            - name: Build Docker image (pull request)
              uses: docker/build-push-action@v3
              if: github.ref != 'refs/heads/master'
              with:
                  context: .
                  file: ./.github/deployment/Dockerfile-cloud
                  tags: ${{ steps.meta_cloud.outputs.tags }}
                  labels: ${{ steps.meta_cloud.outputs.labels }}
                  target: cloud
                  build-args: |
                      BASE_STATIC_IMAGE=ghcr.io/toeverything/affine-self-hosted:latest

            - name: Build and push Docker image (cloud)
              uses: docker/build-push-action@v3
              if: github.ref == 'refs/heads/master'
              with:
                  context: .
                  file: ./.github/deployment/Dockerfile-cloud
                  push: true
                  tags: ${{ steps.meta_cloud.outputs.tags }}
                  labels: ${{ steps.meta_cloud.outputs.labels }}
                  target: cloud

    jwst:
        runs-on: ubuntu-latest
        environment: development
        permissions:
            contents: read
            packages: write

        steps:
            - name: Checkout
              uses: actions/checkout@v2
              with:
                  fetch-depth: 0

            - uses: pnpm/action-setup@v2
              with:
                  version: 7
            - name: Install Rust
              uses: actions-rs/toolchain@v1
              with:
                  profile: minimal
                  toolchain: stable
                  target: x86_64-unknown-linux-musl
                  override: true

            - name: Set up cache
              uses: actions/cache@v3
              continue-on-error: false
              with:
                  path: |
                      ~/.cargo/bin/
                      ~/.cargo/registry/index/
                      ~/.cargo/registry/cache/
                      ~/.cargo/git/db/
                      ./vendor
                      ./.cargo/config
                      ./node_modules/.pnpm-store
                  key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
                  restore-keys: ${{ runner.os }}-cargo-

            - name: Build & Check
              run: |
                  sudo apt install -yq musl-tools musl-dev
                  pnpm i --frozen-lockfile --store=node_modules/.pnpm-store --filter @toeverything/jwt* --filter @toeverything/playground
                  pnpm build:playground
                  cp -r apps/jwt/dist ./dist
                  cargo vendor > .cargo/config
                  cargo build --profile fast-release --package keck --target x86_64-unknown-linux-musl
              env:
                  CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER: x86_64-linux-musl-gcc
                  CARGO_TERM_COLOR: always

            - name: Log in to the Container registry
              if: github.ref == 'refs/heads/master'
              uses: docker/login-action@v2
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.ACTIONS_PACKAGE_PUBLISH }}

            - name: Get current time
              id: time
              run: echo "::set-output name=time::$(date +'%H%M')"

            - name: Extract metadata (tags, labels) for Docker
              id: meta_jwst
              uses: docker/metadata-action@v4
              with:
                  images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.JWST_IMAGE_NAME }}
                  tags: |
                      ${{ env.IMAGE_TAG }}-${{ steps.time.outputs.time }}
                      ${{ env.IMAGE_TAG_LATEST }}

            - name: Build and push Docker image (jwst)
              uses: docker/build-push-action@v3
              with:
                  context: .
                  file: ./.github/deployment/Dockerfile-jwst
                  push: ${{ github.ref == 'refs/heads/master' && true || false }}
                  tags: ${{ steps.meta_jwst.outputs.tags }}
                  labels: ${{ steps.meta_jwst.outputs.labels }}
                  target: jwst
                  network: host

    apiproxy:
        if: github.ref == 'refs/heads/master'
        runs-on: ubuntu-latest
        environment: development
        permissions:
            contents: read
            packages: write

        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Log in to the Container registry
              uses: docker/login-action@v2
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.ACTIONS_PACKAGE_PUBLISH }}

            - name: Extract metadata (tags, labels) for Docker (apiproxy)
              id: meta_apiproxy
              uses: docker/metadata-action@v4
              with:
                  images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.APIPROXY_IMAGE_NAME }}
                  tags: |
                      ${{ env.IMAGE_TAG }}
                      ${{ env.IMAGE_TAG_LATEST }}

            - name: Build and push Docker image (apiproxy)
              uses: docker/build-push-action@v3
              with:
                  context: .
                  file: ./.github/deployment/Dockerfile-apiproxy
                  push: ${{ github.ref == 'refs/heads/master' && true || false }}
                  tags: ${{ steps.meta_apiproxy.outputs.tags }}
                  labels: ${{ steps.meta_apiproxy.outputs.labels }}
                  target: apiproxy

    test:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v1
            - uses: actions-rs/toolchain@v1
              with:
                  toolchain: stable
                  override: true
            - uses: actions-rs/cargo@v1
              with:
                  command: test
                  args: --no-fail-fast

    lint:
        runs-on: ubuntu-latest
        environment: development

        steps:
            - name: Checkout
              uses: actions/checkout@v2
              with:
                  fetch-depth: 0

            - name: Install Rust
              uses: actions-rs/toolchain@v1
              with:
                  profile: minimal
                  toolchain: stable
                  components: clippy
                  override: true

            - name: Set up cache
              uses: actions/cache@v3
              continue-on-error: false
              with:
                  path: |
                      ~/.cargo/bin/
                      ~/.cargo/registry/index/
                      ~/.cargo/registry/cache/
                      ~/.cargo/git/db/
                      ./vendor
                      ./.cargo/config
                      ./node_modules/.pnpm-store
                  key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
                  restore-keys: ${{ runner.os }}-cargo-

            - name: Install required cargo components
              uses: taiki-e/install-action@v2
              with:
                  tool: clippy-sarif,sarif-fmt

            - name: Build & Check
              run: |
                  cargo vendor > .cargo/config
                  cargo clippy --all-features --message-format=json | clippy-sarif | tee rust-clippy-results.sarif | sarif-fmt
                  RUSTDOCFLAGS="-D rustdoc::broken-intra-doc-links" cargo doc --workspace --all-features --no-deps
              env:
                  CARGO_TERM_COLOR: always

            - name: Upload analysis results to GitHub
              uses: github/codeql-action/upload-sarif@v2
              with:
                  sarif_file: rust-clippy-results.sarif
                  wait-for-processing: true
#     coverage:
#         runs-on: ubuntu-latest
#         steps:
#             - uses: actions/checkout@v1
#             - uses: actions-rs/toolchain@v1
#               with:
#                   toolchain: stable
#                   override: true
#             - name: Run cargo-tarpaulin
#               uses: actions-rs/tarpaulin@v0.1
#               with:
#                   version: '0.22.0'
#                   out-type: 'Html'
#                   args: '-p affine-cloud,keck,jwst,jwst-storage --no-fail-fast --engine Llvm'
#               env:
#                   CARGO_INCREMENTAL: '0'
#                   RUSTFLAGS: '-Zprofile -C opt-level=0 -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests'
#                   RUSTDOCFLAGS: '-Zprofile-C opt-level=0 -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests'
#             - uses: actions/upload-artifact@v2
#               with:
#                   name: tarpaulin-report
#                   path: apps/keck/tarpaulin-report.html
