use axum::{extract::Path, response::Response};

use super::*;

/// Get current client id of server
///
/// When the server initializes or get the `Workspace`, a `Client` will be
/// created. This `Client` will not be destroyed until the server restarts.
/// Therefore, the `Client ID` in the history generated by modifying `Block`
/// through HTTP API will remain unchanged until the server restarts.
///
/// This interface return the client id that server will used.
#[utoipa::path(
    get,
    tag = "Workspace",
    context_path = "/api/block",
    path = "/{workspace}/client",
    params(
        ("workspace", description = "workspace id"),
    ),
    responses(
        (status = 200, description = "Get workspace client id", body = u64),
        (status = 404, description = "Workspace not found")
    )
)]
pub async fn workspace_client(Extension(context): Extension<Arc<Context>>, Path(workspace): Path<String>) -> Response {
    if let Ok(workspace) = context.get_workspace(&workspace).await {
        Json(workspace.client_id()).into_response()
    } else {
        (StatusCode::NOT_FOUND, format!("Workspace({workspace:?}) not found")).into_response()
    }
}

/// Get all client ids of the `Workspace`
///
/// This interface returns all `Client IDs` that includes history in the
/// `Workspace`
///
/// Every client write something into a `Workspace` will has a unique id.
///
/// For example:
///   - A user writes a new `Block` to a `Workspace` through `Client` on the
///     front end, which will generate a series of histories. A `Client ID`
///     contained in these histories will be randomly generated by the `Client`
///     and will remain unchanged until the Client instance is destroyed
///   - When the server initializes or get the `Workspace`, a `Client` will be
///     created. This `Client` will not be destroyed until the server restarts.
///     Therefore, the `Client ID` in the history generated by modifying `Block`
///     through HTTP API will remain unchanged until the server restarts.
#[utoipa::path(
    get,
    tag = "Workspace",
    context_path = "/api/block",
    path = "/{workspace}/clients",
    params(
        ("workspace", description = "workspace id"),
    ),
    responses(
        (status = 200, description = "Get workspace client ids", body = [u64]),
        (status = 500, description = "Failed to get workspace client ids")
    )
)]
pub async fn workspace_clients(Extension(context): Extension<Arc<Context>>, Path(workspace): Path<String>) -> Response {
    if let Ok(workspace) = context.get_workspace(&workspace).await {
        Json(workspace.clients()).into_response()
    } else {
        (StatusCode::NOT_FOUND, format!("Workspace({workspace:?}) not found")).into_response()
    }
}
